//go:build !ignore_autogenerated

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *App) DeepCopyInto(out *App) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new App.
func (in *App) DeepCopy() *App {
	if in == nil {
		return nil
	}
	out := new(App)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *App) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AppInitParameters) DeepCopyInto(out *AppInitParameters) {
	*out = *in
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Buildpack != nil {
		in, out := &in.Buildpack, &out.Buildpack
		*out = new(string)
		**out = **in
	}
	if in.Buildpacks != nil {
		in, out := &in.Buildpacks, &out.Buildpacks
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Command != nil {
		in, out := &in.Command, &out.Command
		*out = new(string)
		**out = **in
	}
	if in.DiskQuota != nil {
		in, out := &in.DiskQuota, &out.DiskQuota
		*out = new(float64)
		**out = **in
	}
	if in.DockerImage != nil {
		in, out := &in.DockerImage, &out.DockerImage
		*out = new(string)
		**out = **in
	}
	if in.EnableSSH != nil {
		in, out := &in.EnableSSH, &out.EnableSSH
		*out = new(bool)
		**out = **in
	}
	if in.HealthCheckHTTPEndpoint != nil {
		in, out := &in.HealthCheckHTTPEndpoint, &out.HealthCheckHTTPEndpoint
		*out = new(string)
		**out = **in
	}
	if in.HealthCheckInvocationTimeout != nil {
		in, out := &in.HealthCheckInvocationTimeout, &out.HealthCheckInvocationTimeout
		*out = new(float64)
		**out = **in
	}
	if in.HealthCheckTimeout != nil {
		in, out := &in.HealthCheckTimeout, &out.HealthCheckTimeout
		*out = new(float64)
		**out = **in
	}
	if in.HealthCheckType != nil {
		in, out := &in.HealthCheckType, &out.HealthCheckType
		*out = new(string)
		**out = **in
	}
	if in.Instances != nil {
		in, out := &in.Instances, &out.Instances
		*out = new(float64)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Memory != nil {
		in, out := &in.Memory, &out.Memory
		*out = new(float64)
		**out = **in
	}
	if in.Path != nil {
		in, out := &in.Path, &out.Path
		*out = new(string)
		**out = **in
	}
	if in.Ports != nil {
		in, out := &in.Ports, &out.Ports
		*out = make([]*float64, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(float64)
				**out = **in
			}
		}
	}
	if in.Routes != nil {
		in, out := &in.Routes, &out.Routes
		*out = make([]RoutesInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ServiceBinding != nil {
		in, out := &in.ServiceBinding, &out.ServiceBinding
		*out = make([]ServiceBindingInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SourceCodeHash != nil {
		in, out := &in.SourceCodeHash, &out.SourceCodeHash
		*out = new(string)
		**out = **in
	}
	if in.Space != nil {
		in, out := &in.Space, &out.Space
		*out = new(string)
		**out = **in
	}
	if in.Stack != nil {
		in, out := &in.Stack, &out.Stack
		*out = new(string)
		**out = **in
	}
	if in.Stopped != nil {
		in, out := &in.Stopped, &out.Stopped
		*out = new(bool)
		**out = **in
	}
	if in.Strategy != nil {
		in, out := &in.Strategy, &out.Strategy
		*out = new(string)
		**out = **in
	}
	if in.Timeout != nil {
		in, out := &in.Timeout, &out.Timeout
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AppInitParameters.
func (in *AppInitParameters) DeepCopy() *AppInitParameters {
	if in == nil {
		return nil
	}
	out := new(AppInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AppList) DeepCopyInto(out *AppList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]App, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AppList.
func (in *AppList) DeepCopy() *AppList {
	if in == nil {
		return nil
	}
	out := new(AppList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *AppList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AppObservation) DeepCopyInto(out *AppObservation) {
	*out = *in
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Buildpack != nil {
		in, out := &in.Buildpack, &out.Buildpack
		*out = new(string)
		**out = **in
	}
	if in.Buildpacks != nil {
		in, out := &in.Buildpacks, &out.Buildpacks
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Command != nil {
		in, out := &in.Command, &out.Command
		*out = new(string)
		**out = **in
	}
	if in.DiskQuota != nil {
		in, out := &in.DiskQuota, &out.DiskQuota
		*out = new(float64)
		**out = **in
	}
	if in.DockerImage != nil {
		in, out := &in.DockerImage, &out.DockerImage
		*out = new(string)
		**out = **in
	}
	if in.EnableSSH != nil {
		in, out := &in.EnableSSH, &out.EnableSSH
		*out = new(bool)
		**out = **in
	}
	if in.HealthCheckHTTPEndpoint != nil {
		in, out := &in.HealthCheckHTTPEndpoint, &out.HealthCheckHTTPEndpoint
		*out = new(string)
		**out = **in
	}
	if in.HealthCheckInvocationTimeout != nil {
		in, out := &in.HealthCheckInvocationTimeout, &out.HealthCheckInvocationTimeout
		*out = new(float64)
		**out = **in
	}
	if in.HealthCheckTimeout != nil {
		in, out := &in.HealthCheckTimeout, &out.HealthCheckTimeout
		*out = new(float64)
		**out = **in
	}
	if in.HealthCheckType != nil {
		in, out := &in.HealthCheckType, &out.HealthCheckType
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IDBg != nil {
		in, out := &in.IDBg, &out.IDBg
		*out = new(string)
		**out = **in
	}
	if in.Instances != nil {
		in, out := &in.Instances, &out.Instances
		*out = new(float64)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Memory != nil {
		in, out := &in.Memory, &out.Memory
		*out = new(float64)
		**out = **in
	}
	if in.Path != nil {
		in, out := &in.Path, &out.Path
		*out = new(string)
		**out = **in
	}
	if in.Ports != nil {
		in, out := &in.Ports, &out.Ports
		*out = make([]*float64, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(float64)
				**out = **in
			}
		}
	}
	if in.Routes != nil {
		in, out := &in.Routes, &out.Routes
		*out = make([]RoutesObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ServiceBinding != nil {
		in, out := &in.ServiceBinding, &out.ServiceBinding
		*out = make([]ServiceBindingObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SourceCodeHash != nil {
		in, out := &in.SourceCodeHash, &out.SourceCodeHash
		*out = new(string)
		**out = **in
	}
	if in.Space != nil {
		in, out := &in.Space, &out.Space
		*out = new(string)
		**out = **in
	}
	if in.Stack != nil {
		in, out := &in.Stack, &out.Stack
		*out = new(string)
		**out = **in
	}
	if in.Stopped != nil {
		in, out := &in.Stopped, &out.Stopped
		*out = new(bool)
		**out = **in
	}
	if in.Strategy != nil {
		in, out := &in.Strategy, &out.Strategy
		*out = new(string)
		**out = **in
	}
	if in.Timeout != nil {
		in, out := &in.Timeout, &out.Timeout
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AppObservation.
func (in *AppObservation) DeepCopy() *AppObservation {
	if in == nil {
		return nil
	}
	out := new(AppObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AppParameters) DeepCopyInto(out *AppParameters) {
	*out = *in
	if in.Annotations != nil {
		in, out := &in.Annotations, &out.Annotations
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Buildpack != nil {
		in, out := &in.Buildpack, &out.Buildpack
		*out = new(string)
		**out = **in
	}
	if in.Buildpacks != nil {
		in, out := &in.Buildpacks, &out.Buildpacks
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Command != nil {
		in, out := &in.Command, &out.Command
		*out = new(string)
		**out = **in
	}
	if in.DiskQuota != nil {
		in, out := &in.DiskQuota, &out.DiskQuota
		*out = new(float64)
		**out = **in
	}
	if in.DockerCredentialsSecretRef != nil {
		in, out := &in.DockerCredentialsSecretRef, &out.DockerCredentialsSecretRef
		*out = new(v1.SecretReference)
		**out = **in
	}
	if in.DockerImage != nil {
		in, out := &in.DockerImage, &out.DockerImage
		*out = new(string)
		**out = **in
	}
	if in.EnableSSH != nil {
		in, out := &in.EnableSSH, &out.EnableSSH
		*out = new(bool)
		**out = **in
	}
	if in.EnvironmentSecretRef != nil {
		in, out := &in.EnvironmentSecretRef, &out.EnvironmentSecretRef
		*out = new(v1.SecretReference)
		**out = **in
	}
	if in.HealthCheckHTTPEndpoint != nil {
		in, out := &in.HealthCheckHTTPEndpoint, &out.HealthCheckHTTPEndpoint
		*out = new(string)
		**out = **in
	}
	if in.HealthCheckInvocationTimeout != nil {
		in, out := &in.HealthCheckInvocationTimeout, &out.HealthCheckInvocationTimeout
		*out = new(float64)
		**out = **in
	}
	if in.HealthCheckTimeout != nil {
		in, out := &in.HealthCheckTimeout, &out.HealthCheckTimeout
		*out = new(float64)
		**out = **in
	}
	if in.HealthCheckType != nil {
		in, out := &in.HealthCheckType, &out.HealthCheckType
		*out = new(string)
		**out = **in
	}
	if in.Instances != nil {
		in, out := &in.Instances, &out.Instances
		*out = new(float64)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Memory != nil {
		in, out := &in.Memory, &out.Memory
		*out = new(float64)
		**out = **in
	}
	if in.Path != nil {
		in, out := &in.Path, &out.Path
		*out = new(string)
		**out = **in
	}
	if in.Ports != nil {
		in, out := &in.Ports, &out.Ports
		*out = make([]*float64, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(float64)
				**out = **in
			}
		}
	}
	if in.Routes != nil {
		in, out := &in.Routes, &out.Routes
		*out = make([]RoutesParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ServiceBinding != nil {
		in, out := &in.ServiceBinding, &out.ServiceBinding
		*out = make([]ServiceBindingParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SourceCodeHash != nil {
		in, out := &in.SourceCodeHash, &out.SourceCodeHash
		*out = new(string)
		**out = **in
	}
	if in.Space != nil {
		in, out := &in.Space, &out.Space
		*out = new(string)
		**out = **in
	}
	if in.Stack != nil {
		in, out := &in.Stack, &out.Stack
		*out = new(string)
		**out = **in
	}
	if in.Stopped != nil {
		in, out := &in.Stopped, &out.Stopped
		*out = new(bool)
		**out = **in
	}
	if in.Strategy != nil {
		in, out := &in.Strategy, &out.Strategy
		*out = new(string)
		**out = **in
	}
	if in.Timeout != nil {
		in, out := &in.Timeout, &out.Timeout
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AppParameters.
func (in *AppParameters) DeepCopy() *AppParameters {
	if in == nil {
		return nil
	}
	out := new(AppParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AppSpec) DeepCopyInto(out *AppSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AppSpec.
func (in *AppSpec) DeepCopy() *AppSpec {
	if in == nil {
		return nil
	}
	out := new(AppSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AppStatus) DeepCopyInto(out *AppStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AppStatus.
func (in *AppStatus) DeepCopy() *AppStatus {
	if in == nil {
		return nil
	}
	out := new(AppStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RoutesInitParameters) DeepCopyInto(out *RoutesInitParameters) {
	*out = *in
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(float64)
		**out = **in
	}
	if in.Route != nil {
		in, out := &in.Route, &out.Route
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RoutesInitParameters.
func (in *RoutesInitParameters) DeepCopy() *RoutesInitParameters {
	if in == nil {
		return nil
	}
	out := new(RoutesInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RoutesObservation) DeepCopyInto(out *RoutesObservation) {
	*out = *in
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(float64)
		**out = **in
	}
	if in.Route != nil {
		in, out := &in.Route, &out.Route
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RoutesObservation.
func (in *RoutesObservation) DeepCopy() *RoutesObservation {
	if in == nil {
		return nil
	}
	out := new(RoutesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RoutesParameters) DeepCopyInto(out *RoutesParameters) {
	*out = *in
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(float64)
		**out = **in
	}
	if in.Route != nil {
		in, out := &in.Route, &out.Route
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RoutesParameters.
func (in *RoutesParameters) DeepCopy() *RoutesParameters {
	if in == nil {
		return nil
	}
	out := new(RoutesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServiceBindingInitParameters) DeepCopyInto(out *ServiceBindingInitParameters) {
	*out = *in
	if in.ServiceInstance != nil {
		in, out := &in.ServiceInstance, &out.ServiceInstance
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServiceBindingInitParameters.
func (in *ServiceBindingInitParameters) DeepCopy() *ServiceBindingInitParameters {
	if in == nil {
		return nil
	}
	out := new(ServiceBindingInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServiceBindingObservation) DeepCopyInto(out *ServiceBindingObservation) {
	*out = *in
	if in.ServiceInstance != nil {
		in, out := &in.ServiceInstance, &out.ServiceInstance
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServiceBindingObservation.
func (in *ServiceBindingObservation) DeepCopy() *ServiceBindingObservation {
	if in == nil {
		return nil
	}
	out := new(ServiceBindingObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServiceBindingParameters) DeepCopyInto(out *ServiceBindingParameters) {
	*out = *in
	if in.ParamsJSONSecretRef != nil {
		in, out := &in.ParamsJSONSecretRef, &out.ParamsJSONSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.ParamsSecretRef != nil {
		in, out := &in.ParamsSecretRef, &out.ParamsSecretRef
		*out = new(v1.SecretReference)
		**out = **in
	}
	if in.ServiceInstance != nil {
		in, out := &in.ServiceInstance, &out.ServiceInstance
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServiceBindingParameters.
func (in *ServiceBindingParameters) DeepCopy() *ServiceBindingParameters {
	if in == nil {
		return nil
	}
	out := new(ServiceBindingParameters)
	in.DeepCopyInto(out)
	return out
}
